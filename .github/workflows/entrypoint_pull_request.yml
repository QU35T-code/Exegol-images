name: External PR tests

on:
  pull_request:
    branches:
      - dev
      - "*.*.*"
      - "*.*.*b*"
    paths-ignore:
      - ".github/**"
      - "**.md"

# creating a separate concurrency group for each PR
# so that our "PR checks" are always running for the latest commit in the PR
# and as PRs are updated we want to make sure "in progress" jobs are killed so we don't waste resources
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # intermediary registry in which architecture-specific images must be pushed
  BASE_IMAGE_NAME: "exegol-base"
  DOCKER_BUILD_REPO: "nwodtuhs/exegol-builds"
  # final registry target, in which arch-specific images must be aggregated
  DOCKER_TARGET_REPO: "nwodtuhs/exegol"
  DOCKERFILE: "Dockerfile"

jobs:
  varset:
    name: Initialize variables
    runs-on: self-hosted
    outputs:
      DOCKER_BUILD_REPO: ${{ steps.varset.outputs.DOCKER_BUILD_REPO }}
      DOCKER_TARGET_REPO: ${{ steps.varset.outputs.DOCKER_TARGET_REPO }}
      IMAGE_BASE_NAME: ${{ steps.varset.outputs.IMAGE_BASE_NAME }}
      DOCKERFILE: ${{ steps.varset.outputs.DOCKERFILE }}
    steps:
      - name: Passing workflow env vars to reusable workflows
        id: varset
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "DOCKER_BUILD_REPO=${DOCKER_BUILD_REPO}" >> $GITHUB_OUTPUT
          echo "DOCKER_TARGET_REPO=${DOCKER_TARGET_REPO}" >> $GITHUB_OUTPUT
          echo "IMAGE_BASE_NAME=PR${PR_NUMBER}"
          echo "IMAGE_BASE_NAME=PR${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_OUTPUT

  code-check:
    name: Code compliance
    uses: ./.github/workflows/sub_code_check.yml

  base_belt:
    name: Base belt
    needs: [varset, code-check]
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64]
        #arch: [arm64, amd64]
    uses: ./.github/workflows/sub_build_belt.yml
    with:
      # BASE_IMAGE_NAME: ${{ needs.varset.outputs.BASE_IMAGE_NAME }}
      DOCKER_BUILD_REPO: exegol-base
      #DOCKER_BUILD_REPO: ${{ needs.varset.outputs.DOCKER_BUILD_REPO }}
      DOCKER_TARGET_REPO: ${{ needs.varset.outputs.DOCKER_TARGET_REPO }}
      IMAGE_BASE_NAME: ${{ needs.varset.outputs.IMAGE_BASE_NAME }}
      DOCKERFILE: ./build/base.dockerfile
      IMAGE_VERSION: ${{ needs.varset.outputs.IMAGE_VERSION }}
      ARCH: ${{ matrix.arch }}
      PACKAGE_NAME: nothing
      PR_MODE: true

  build_belt:
    name: Build belt
    # needs: [varset]
    needs: [varset, base_belt]
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64 ]
        #arch: [ arm64, amd64 ]
        #intermediary_images: [ "sdr" ]
        intermediary_images: [ "iot", "misc", "cloud", "mobile", "c2", "crypto", "voip", "wifi", "forensic", "code_analysis", "wordlists", "cracking", "rfid", "sdr", "ad"]
    uses: ./.github/workflows/sub_build_belt.yml
    with:
      DOCKER_BUILD_REPO: exegol-${{ matrix.intermediary_images }}
      #DOCKER_BUILD_REPO: ${{ needs.varset.outputs.DOCKER_BUILD_REPO }}
      DOCKER_TARGET_REPO: ${{ needs.varset.outputs.DOCKER_TARGET_REPO }}
      IMAGE_BASE_NAME: ${{ needs.varset.outputs.IMAGE_BASE_NAME }}
      DOCKERFILE: ./build/intermediate.dockerfile
      IMAGE_VERSION: ${{ needs.varset.outputs.IMAGE_VERSION }}
      ARCH: ${{ matrix.arch }}
      PACKAGE_NAME: ${{ matrix.intermediary_images }}
      PR_MODE: true

  image_belt:
    name: Image belt
    # needs: [varset, build_belt]
    needs: [varset, base_belt, build_belt]
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64 ]
        #arch: [ arm64, amd64 ]
    uses: ./.github/workflows/sub_end_belt.yml
    with:
      DOCKER_BUILD_REPO: exegol-nightly
      #DOCKER_BUILD_REPO: ${{ needs.varset.outputs.DOCKER_BUILD_REPO }}
      DOCKER_TARGET_REPO: ${{ needs.varset.outputs.DOCKER_TARGET_REPO }}
      IMAGE_BASE_NAME: ${{ needs.varset.outputs.IMAGE_BASE_NAME }}
      DOCKERFILE: ./build/nightly.dockerfile
      IMAGE_VERSION: ${{ needs.varset.outputs.IMAGE_VERSION }}
      ARCH: ${{ matrix.arch }}
      PACKAGE_NAME: nothing
      PR_MODE: true

  # clean_runners:
  #   name: Clean runners
  #   needs:
  #     - varset
  #     - image_belt
  #   if: always() && !contains(needs.image_belt.outputs.build, 'failure')
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       arch: [ arm64 ]
  #       #arch: [ arm64, amd64 ]
  #   runs-on:
  #     - self-hosted
  #     - builder
  #     - ${{ matrix.arch }}
  #   steps:
  #     - name: Remove built image ${{ needs.varset.outputs.IMAGE_BASE_NAME }}-${{ matrix.arch }}
  #       run: |
  #         image_name=${DOCKER_BUILD_REPO}:${{ needs.varset.outputs.IMAGE_BASE_NAME }}-${{ matrix.arch }}
  #         echo "Removing $image_name"
  #         docker image inspect $image_name || exit 0 && docker rmi $image_name

